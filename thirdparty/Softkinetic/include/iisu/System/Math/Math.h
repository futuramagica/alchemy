/* Version: $Id: Math.h 12995 2011-01-17 17:31:07Z jeremie $ */
// Maths.h: interface for the Math class.
//
//////////////////////////////////////////////////////////////////////
#pragma once

#include <Platform/SkPlatform.h>
//#include <Platform/CompileTimeUtils.h>

#ifdef __cplusplus

namespace SK 
{
	//! Math class wrapper
	class IISUSDK_API Math
	{
	public:

		//*************** INTEGER ALGEBRA *************** 

		//! Clamps the value to the range [low, hi] (inclusive)
		static int32_t clamp(int32_t val, int32_t low, int32_t high);
		//! Returns the absolute value of number .
		static int32_t iAbs (int32_t number);
		//! return -1,1 or 0 according to the sign of number
		static int32_t iSign (int32_t number);
		//! Returns the next highest integer value by rounding up value if necessary. 
		static int32_t iCeil (float number);
		//! Returns the next lowest integer value by rounding down value if necessary. 
		static int32_t iFloor (float number);

		//***************  REAL ALGEBRA *************** 

		//! Compare 2 reals, using tolerance for inaccuracies.		
		static bool  equal( float a, float b, float tolerance = SK_REAL_EPSILON );
		//! Returns the absolute value of number.
		static float abs (float number);
		//! Returns the absolute value of number.
		static double abs (double number);
		//! Returns the absolute value of number.
		static int32_t abs (int32_t number);
		//! return -1,1 or 0 according to the sign of number
		static float sign (float number);
		//! Returns the next highest integer value (as a float) by rounding up value if necessary. 
		static float ceil (float number);
		//! Returns the next lowest integer value (as a float) by rounding down value if necessary. 
		static float floor (float number);
		//! Returns the floating-point remainder of numerator/denominator.
		// (this the result of subtracting the integral quotient multiplied by the denominator from the numerator)
		static float fmod (float numerator, float denominator);

		//! Clamps the value to the range [low, hi] (inclusive) 
		static float clamp(float val, float low, float high);
		//! Linear interpolation between two values: return a + (b - a) * f
		static float lerp(float value1, float value2, float interpolater);

		//! Returns e raised to the power of arg . 
		/** 
		@remarks
		'e' is the base of the natural system of logarithms, or approximately 2.718282.
		*/
		static float exp (float number);

		//! Returns the natural logarithm of number
		static float log (float number);

		//! Returns baseVal raised to the power of exponentVal
		static int16_t pow (int16_t baseVal, int16_t exponentVal);

		//! Returns baseVal raised to the power of exponentVal
		static float pow (float baseVal, float exponentVal);

		//! Returns the square of number
		static float sqr (float number);
		//! Returns the square root of number
		static float sqrt (float number);
		//! Returns the square root of number
		static double sqrt (double number);
		//! return 1 / sqrt(x)
		static float invSqrt (float number);

		//***************  FLOAT TRIGONOMETRY *************** 

		//! convert degree to radian
		static float degreeToRadian (float degreeValue);
		//! convert radian to degree
		static float radianToDegree (float radianValue);

		//! Cosine (in radian)
		static float cos (float number);	
		//! Cosine (in radian)
		static double cos (double number);
		//! Sine (in radian)
		static float sin (float number);	
		//! Sine (in radian)
		static double sin (double number);
		//! Tangent (in radian)
		static float tan (float number);
		//! Tangent (in radian)
		static double tan (double number);

		//! Arc cosine (in radian)
		static float aCos (float number);
		//! Arc cosine (in radian)
		static double aCos (double number);
		//! Arc Sine (in radian)
		static float aSin (float number);
		//! Arc tangent (in radian)
		static float aTan (float number);
		//! Arc tangent of two variables
		/** 
		@remarks
		It is similar to calculating the arc tangent of y  / x , except that the signs of both arguments are used to determine the quadrant of the result. 
		*/				
		static float aTan2 (float fY, float fX);

		//! Normalize angle in ]-Pi,Pi].
		static float normalizeInMinusPiPi(float angle);

		//******* Simple Random Number generation ***********

		//! Initialize the pseudo random number generator using the argument passed as seed.
		static void setSeed(uint32_t seed);
		//! Return the highest integer value generated by randomInt
		static int32_t getRAND_MAX();
		//! Return a random integer value in [0, RAND_MAX]
		static int32_t random();
		//! Return a random real value in [0,1]
		static float unitRandom();
		//! Return a random real value in [-1,1]
		static float symmetricRandom();
		//! Return a random real value following a reduced normal distribution.
		static float normalRandom(float mean = 0.0f, float stdDev = 1.0f);

		//******** Constant values ************

		//NDT: avoid name clash with macro
#ifdef PI 
#undef PI
		//! PI
		static const float PI;
#define PI (3.14159265358979323846)
		static const double PI_DOUBLE;
#else
		//! PI
		static const float PI;
		static const double PI_DOUBLE;
#endif
		//! 2 * PI
		static const float TWO_PI;
		//! PI / 2
		static const float HALF_PI;
		//! PI / 180
		static const float PI_OVER_180;
		//! 180 / PI
		static const float PI_UNDER_180;

		static const float ZERO_TOLERANCE;
	};

}//end of namespace SK

#ifndef SK_DEBUG
#include "Math.inl"
#endif

#endif

